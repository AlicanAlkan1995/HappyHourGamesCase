//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace HappyHourGames.Scripts.InputSystem
{
    public partial class @GameInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""BoardViewMap"",
            ""id"": ""8ecc2168-844f-42ee-855a-cce076229c40"",
            ""actions"": [
                {
                    ""name"": ""Pan"",
                    ""type"": ""Value"",
                    ""id"": ""17aaf190-84c5-407f-a6ec-7400f1406fa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""bae1c354-9e89-4079-b8d2-b5886ceda088"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""fd0ca821-2152-4bff-9e01-bc6490f71c31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f8f3c82e-78a8-43ea-9c24-3ec3ae91f33f"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""da113b09-5c2d-4d91-b230-9a1d8f1acfd7"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""de6609e8-4fa8-44d5-bc22-024f09999b1f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""540e2a5c-2a2f-4b4d-b829-730ef477f16e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ce61ceed-dddb-4b5a-b356-b4567be5c1d0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // BoardViewMap
            m_BoardViewMap = asset.FindActionMap("BoardViewMap", throwIfNotFound: true);
            m_BoardViewMap_Pan = m_BoardViewMap.FindAction("Pan", throwIfNotFound: true);
            m_BoardViewMap_Zoom = m_BoardViewMap.FindAction("Zoom", throwIfNotFound: true);
            m_BoardViewMap_Click = m_BoardViewMap.FindAction("Click", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // BoardViewMap
        private readonly InputActionMap m_BoardViewMap;
        private List<IBoardViewMapActions> m_BoardViewMapActionsCallbackInterfaces = new List<IBoardViewMapActions>();
        private readonly InputAction m_BoardViewMap_Pan;
        private readonly InputAction m_BoardViewMap_Zoom;
        private readonly InputAction m_BoardViewMap_Click;
        public struct BoardViewMapActions
        {
            private @GameInputs m_Wrapper;
            public BoardViewMapActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pan => m_Wrapper.m_BoardViewMap_Pan;
            public InputAction @Zoom => m_Wrapper.m_BoardViewMap_Zoom;
            public InputAction @Click => m_Wrapper.m_BoardViewMap_Click;
            public InputActionMap Get() { return m_Wrapper.m_BoardViewMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BoardViewMapActions set) { return set.Get(); }
            public void AddCallbacks(IBoardViewMapActions instance)
            {
                if (instance == null || m_Wrapper.m_BoardViewMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BoardViewMapActionsCallbackInterfaces.Add(instance);
                @Pan.started += instance.OnPan;
                @Pan.performed += instance.OnPan;
                @Pan.canceled += instance.OnPan;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }

            private void UnregisterCallbacks(IBoardViewMapActions instance)
            {
                @Pan.started -= instance.OnPan;
                @Pan.performed -= instance.OnPan;
                @Pan.canceled -= instance.OnPan;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
            }

            public void RemoveCallbacks(IBoardViewMapActions instance)
            {
                if (m_Wrapper.m_BoardViewMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBoardViewMapActions instance)
            {
                foreach (var item in m_Wrapper.m_BoardViewMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BoardViewMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BoardViewMapActions @BoardViewMap => new BoardViewMapActions(this);
        public interface IBoardViewMapActions
        {
            void OnPan(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
        }
    }
}
